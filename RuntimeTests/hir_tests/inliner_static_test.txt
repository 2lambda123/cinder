InlinerStaticTest
---
InlineFunctionCalls
Simplify
---
InvokeStaticFunctionWithNoArgs
---
def foo():
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 6
    }
    v5:MortalLongExact[4] = LoadConst<MortalLongExact[4]>
    EndInlinedFunction
    Return v5
  }
}
---
InvokeStaticFunctionWithArgs
---
def foo(x: int, y: int) -> int:
    # Chosen by fair dice roll. Guaranteed to be random.
    return x + y

def test():
    return foo(1, 2)
---
fun jittestmodule:test {
  bb 0 {
    v4:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v5:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 10
    }
    UseType<LongExact> v4
    UseType<LongExact> v5
    v19:LongExact = LongBinaryOp<Add> v4 v5 {
      NextInstrOffset 8
      Locals<2> v4 v5
    }
    v17:Long = Cast<int> v19 {
      NextInstrOffset 10
      Locals<2> v4 v5
    }
    EndInlinedFunction
    Return v17
  }
}
---
InvokeStaticFunctionReturningCType
---
from __static__ import int8

def foo() -> int8:
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test() -> int8:
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    BeginInlinedFunction<jittestmodule:foo> {
      NextInstrOffset 6
    }
    v5:CInt8[4] = LoadConst<CInt8[4]>
    EndInlinedFunction
    Return<CInt8> v5
  }
}
---
