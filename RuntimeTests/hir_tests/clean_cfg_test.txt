CleanCFGTest
---
CleanCFG
---
MergesLinkedListTrampolineBlocks
---
# HIR
fun test {
  bb 0 {
    v0 = LoadConst<NoneType>
    Branch<1>
  }

  bb 1 (preds 0) {
    v1 = LoadConst<NoneType>
    Branch<2>
  }

  bb 2 (preds 1) {
    v2 = LoadConst<NoneType>
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:NoneType = LoadConst<NoneType>
    v1:NoneType = LoadConst<NoneType>
    v2:NoneType = LoadConst<NoneType>
    Return v2
  }
}
---
DoesNotMergeBranchToSelf
---
# HIR
fun test {
  bb 0 {
    v0 = LoadConst<NoneType>
    Branch<0>
  }
}
---
fun test {
  bb 0 (preds 0) {
    v0:NoneType = LoadConst<NoneType>
    Branch<0>
  }
}
---
ReplaceBottomWithUnreachable
---
def test():
  if a():
    pass
  def a():
    pass
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:Bottom = CheckVar<"a"> v7 {
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
      }
    }
    Unreachable
  }
}
---
ReplaceNonDeoptingBottomValueWithUnreachable
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = LoadArg<1>
    v2 = GuardType<Tuple> v0
    v3 = Assign v2
    v4 = GuardType<Tuple> v1
    v5 = LoadConst<Bottom>
    v6 = Assign v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:Tuple = GuardType<Tuple> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v4:Tuple = GuardType<Tuple> v1 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Unreachable
  }
}
---
CleanUpPhisWithBottomInputs
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    CondBranch<1, 3> v0
  }

  bb 1 (preds 0, 2, 3) {
    v1:Object = Phi<0, 2, 3> v0 v2 v3
    Branch<2>
  }

  bb 2 (preds 1) {
    v2:Bottom = LoadConst<Bottom>
    CondBranch<1, 3> v2
  }

  bb 3 (preds 0, 2) {
    v3 = UnaryOp<Not> v0
    CondBranch<1, 4> v3
  }

  bb 4 (preds 3) {
    v4 = Assign v3
    Return v4
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v3:Bool = UnaryOp<Not> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Return v3
  }
}
---
CleanupBlocksDominatedByBottomValue
---
# HIR
fun test {
  bb 0 {
    v0:Bottom = LoadConst<Bottom>
    CondBranch<1, 2> v0
  }

  bb 1 (preds 0, 2) {
    v1:NoneType = LoadConst<NoneType>
    Branch<2>
  }

  bb 2 (preds 1) {
    v2:NoneType = LoadConst<NoneType>
    Return v2
  }
}
---
fun test {
  bb 0 {
    Unreachable
  }
}
---
CleanUpCondBranchToAnUnreachableEdge
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; CInt32>
    CondBranch<1, 2> v0
  }

  bb 1 (preds 0) {
    v1:NoneType = LoadConst<NoneType>
    Return v1
  }

  bb 2 (preds 0) {
    v2:Bottom = LoadConst<Bottom>
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:NoneType = LoadConst<NoneType>
    Return v1
  }
}
---
CleanUpCondBranchToTwoUnreachableEdges
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; CInt32>
    v1 = GuardType<Tuple> v0
    CondBranch<1, 2> v0
  }

  bb 1 (preds 0) {
    v2:Bottom = LoadConst<Bottom>
    Return v2
  }

  bb 2 (preds 0) {
    v3:Bottom = LoadConst<Bottom>
    Return v3
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Tuple = GuardType<Tuple> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Unreachable
  }
}
---
CleanUpExistingUnreachable
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; CInt32>
    v1 = GuardType<Tuple> v0
    CondBranch<1, 2> v0
  }

  bb 1 (preds 0) {
    v2:Bottom = LoadConst<Bottom>
    v3 = LoadConst<NoneType>
    v4:Object = BinaryOp<Add> v0 v3
    v5:NoneType = LoadConst<NoneType>
    Unreachable
  }

  bb 2 (preds 0) {
    v6:NoneType = LoadConst<NoneType>
    Return v6
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Tuple = GuardType<Tuple> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v6:NoneType = LoadConst<NoneType>
    Return v6
  }
}
---
CleanUpLoopWithUnreachable
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0; CInt32>
    v1 = GuardType<Tuple> v0
    Branch<1>
  }

  bb 1 (preds 0, 4) {
    v2 = LoadConst<NoneType>
    v3:Object = BinaryOp<Add> v0 v2
    Branch<2>
  }

  bb 2 (preds 1) {
    v4:Object = BinaryOp<Add> v0 v3
    v5:Bottom = LoadConst<Bottom>
    Branch<3>
  }
  bb 3 (preds 2) {
    v6:NoneType = LoadConst<NoneType>
    Branch<4>
  }

  bb 4 (preds 3) {
    v7:NoneType = LoadConst<NoneType>
    CondBranch<1, 5> v7
  }

  bb 5 (preds 4) {
    v8:NoneType = LoadConst<NoneType>
    Return v8
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Tuple = GuardType<Tuple> v0 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v2:NoneType = LoadConst<NoneType>
    v3:Object = BinaryOp<Add> v0 v2 {
      FrameState {
        NextInstrOffset 0
      }
    }
    v4:Object = BinaryOp<Add> v0 v3 {
      FrameState {
        NextInstrOffset 0
      }
    }
    Unreachable
  }
}
---
