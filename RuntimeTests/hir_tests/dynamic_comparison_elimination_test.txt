DynamicComparisonEliminationTest
---
DynamicComparisonElimination
---
IsBecomesComparison
---
def test(x, y):
  if x is y:
    return 1
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "x">
    v7:Object = LoadArg<1; "y">
    v11:CBool = PrimitiveCompare<Equal> v6 v7
    CondBranch<1, 2> v11
  }

  bb 1 (preds 0) {
    v12:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Return v12
  }

  bb 2 (preds 0) {
    v13:NoneType = LoadConst<NoneType>
    Return v13
  }
}
---
IsNotBecomesComparison
---
def test(x, y):
  if x is not y:
    return 1
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "x">
    v7:Object = LoadArg<1; "y">
    v11:CBool = PrimitiveCompare<NotEqual> v6 v7
    CondBranch<1, 2> v11
  }

  bb 1 (preds 0) {
    v12:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Return v12
  }

  bb 2 (preds 0) {
    v13:NoneType = LoadConst<NoneType>
    Return v13
  }
}
---
IsBecomesComparisonOutsideIf
---
def test(x, y):
  return x is y
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v8:CBool = PrimitiveCompare<Equal> v3 v4
    v7:Bool = PrimitiveBox<false> v8
    Return v7
  }
}
---
IsNotBecomesComparisonOutsideIf
---
def test(x, y):
  return x is not y
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v8:CBool = PrimitiveCompare<NotEqual> v3 v4
    v7:Bool = PrimitiveBox<false> v8
    Return v7
  }
}
---
IsInstanceFastpath
---
def test(x):
  if isinstance(x, str):
    return 1
---
fun jittestmodule:test {
  bb 0 {
    v7:Object = LoadArg<0; "x">
    v8:OptObject = LoadGlobalCached<0; "isinstance">
    v9:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v8
    v11:OptObject = LoadGlobalCached<1; "str">
    v12:MortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v11
    v17:Type = LoadField<8> v7
    v18:CBool = PrimitiveCompare<Equal> v17 v12
    CondBranch<1, 3> v18
  }

  bb 3 (preds 0) {
    v14:CInt32 = IsInstance v7 v12 {
      NextInstrOffset 10
      Locals<1> v7
    }
    CondBranch<1, 2> v14
  }

  bb 1 (preds 0, 3) {
    v15:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Return v15
  }

  bb 2 (preds 3) {
    v16:NoneType = LoadConst<NoneType>
    Return v16
  }
}
---
