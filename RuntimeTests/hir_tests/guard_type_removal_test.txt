GuardTypeRemovalTest
---
GuardTypeRemoval
---
GuardTypeRemovalRemovesUnusedGuardType
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = LoadArg<1>
    v2 = GuardType<ListExact> v0
    v3 = BinaryOp<Subscript> v2 v1 {
      NextInstrOffset 6
      Locals<2> v0 v1
    }
    v4 = Assign v3
    v5 = LoadConst<NoneType>
    Return v5
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v3:Object = BinaryOp<Subscript> v0 v1 {
      NextInstrOffset 6
      Locals<2> v0 v1
    }
    v5:NoneType = LoadConst<NoneType>
    Return v5
  }
}
---
KeepsGuardTypeWhenRefineTypeIsntSufficientRefinement
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = LoadArg<1>
    v2 = LoadArg<2>
    v3 = GuardType<Tuple> v0
    v4 = RefineType<BuiltinExact> v3
    v5 = PrimitiveUnbox<CInt64> v1
    v6 = LoadArrayItem v4 v5 v2
    Return v6
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v2:Object = LoadArg<2>
    v3:Tuple = GuardType<Tuple> v0 {
      NextInstrOffset 0
    }
    v4:TupleExact = RefineType<BuiltinExact> v3
    v5:CInt64 = PrimitiveUnbox<CInt64> v1
    v6:Object = LoadArrayItem v4 v5 v2
    Return v6
  }
}
---
FrameStateUsesDontKeepGuardsAlive
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = LoadArg<1>
    v2 = GuardType<TupleExact> v0
    v3 = GuardType<ListExact> v1 {
      Stack<1> v2
    }
    v4 = LoadConst<CInt64[5]>
    v5 = RepeatList v3 v4
    Return v5
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:Object = LoadArg<1>
    v3:ListExact = GuardType<ListExact> v1 {
      NextInstrOffset 0
      Stack<1> v0
    }
    v4:CInt64[5] = LoadConst<CInt64[5]>
    v5:ListExact = RepeatList v3 v4 {
      NextInstrOffset 0
    }
    Return v5
  }
}
---
PrimitiveUnboxUsesInputType
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = GuardType<LongExact> v0
    v2 = PrimitiveUnbox<CInt32> v1
    v3 = LoadConst<CInt32[123]>
    v4 = IntBinaryOp<Add> v2 v3
    v5 = PrimitiveBox<CInt32> v4
    v6 = CheckExc v5
    Return v6
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:LongExact = GuardType<LongExact> v0 {
      NextInstrOffset 0
    }
    v2:CInt32 = PrimitiveUnbox<CInt32> v1
    v3:CInt32[123] = LoadConst<CInt32[123]>
    v4:CInt32 = IntBinaryOp<Add> v2 v3
    v5:OptLongExact = PrimitiveBox<CInt32> v4
    v6:LongExact = CheckExc v5 {
      NextInstrOffset 0
    }
    Return v6
  }
}
---
