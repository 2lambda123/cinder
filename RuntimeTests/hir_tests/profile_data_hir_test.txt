ProfileDataHIRTest
---
GuardTypeRemoval
---
LoadFromTuple
---
def test(c, i):
  return c[i]
test((1, 2, 3), 1)
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "c">
    v4:Object = LoadArg<1; "i">
    v7:TupleExact = GuardType<TupleExact> v3 {
      GuiltyReg v3
    }
    v8:LongExact = GuardType<LongExact> v4 {
      GuiltyReg v4
    }
    UseType<TupleExact> v7
    UseType<LongExact> v8
    v10:CInt64 = PrimitiveUnbox<CInt64> v8
    v11:CInt64 = CheckSequenceBounds v7 v10 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v7 v8
      }
    }
    v12:Object = LoadArrayItem<Offset[24]> v7 v11 v7
    Return v12
  }
}
---
PolymorphicOperandsTest
---
def test(c, i):
  return c[i]
test((1, 2, 3), 1)
test([1, 2, 3], 1)
test([1, 2, 3], 1)
test([1, 2, 3], 1)
test({"key": "value"}, "key")
test({"key": "value"}, "key")
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "c">
    v4:Object = LoadArg<1; "i">
    HintType<2, <ListExact, LongExact>, <DictExact, UnicodeExact>, <TupleExact, LongExact>> v3 v4
    v7:Object = BinaryOp<Subscript> v3 v4 {
      FrameState {
        NextInstrOffset 6
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
---
CreateUnreachableCFGLoop
---
def test(x, y):
  if x is None:
    while y:
      pass

test(True, 1)
---
fun jittestmodule:test {
  bb 0 {
    v12:Object = LoadArg<0; "x">
    v13:Object = LoadArg<1; "y">
    v15:NoneType = LoadConst<NoneType>
    v16:Bool = GuardType<Bool> v12 {
      GuiltyReg v12
    }
    UseType<Bool> v16
    UseType<NoneType> v15
    v34:ImmortalBool[False] = LoadConst<ImmortalBool[False]>
    UseType<ImmortalBool[False]> v34
    v35:CInt32[0] = LoadConst<CInt32[0]>
    v33:NoneType = LoadConst<NoneType>
    Return v33
  }
}
---
CallFunctionEx
---
def callee():
  pass

def test(iterable):
  return callee(*iterable)

test(())
test([])
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "iterable">
    v4:OptObject = LoadGlobalCached<0; "callee">
    v5:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v4 {
      Descr 'LOAD_GLOBAL: callee'
    }
    HintType<2, <Func, TupleExact>, <Func, ListExact>> v5 v3
    v7:Object = CallEx v5 v3 {
      FrameState {
        NextInstrOffset 6
        Locals<1> v3
      }
    }
    Return v7
  }
}
---
CallFunctionExWithKwargs
---
def callee():
  pass

def test(iterable, mapping):
  return callee(*iterable, **mapping)

class C(dict):
  pass

test((), {})
test([], C({}))
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "iterable">
    v7:Object = LoadArg<1; "mapping">
    v8:OptObject = LoadGlobalCached<0; "callee">
    v9:MortalFunc[function:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: callee'
    }
    v11:MortalDictExact = MakeDict<0> {
      FrameState {
        NextInstrOffset 6
        Locals<2> v6 v7
        Stack<2> v9 v6
      }
    }
    HintType<2, <DictExact, DictExact>, <DictExact, DictUser[C:Exact]>> v11 v7
    v13:CInt32 = DictMerge v11 v7 v9 {
      FrameState {
        NextInstrOffset 10
        Locals<2> v6 v7
        Stack<3> v9 v6 v11
      }
    }
    HintType<3, <Func, TupleExact, DictExact>, <Func, ListExact, DictExact>> v9 v6 v11
    v14:Object = CallExKw v9 v6 v11 {
      FrameState {
        NextInstrOffset 12
        Locals<2> v6 v7
      }
    }
    Return v14
  }
}
---
CallFunction
---
def callee(a, b):
  pass

class C:
  def __init__(self, a, b):
    pass

def test(f, a, b):
  return f(a, b)

test(callee, 123, "123")
test(C, "456", (4,5,6))
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "f">
    v5:Object = LoadArg<1; "a">
    v6:Object = LoadArg<2; "b">
    HintType<1, <Func>, <TypeExact>> v4
    v10:Object = VectorCall<2> v4 v5 v6 {
      FrameState {
        NextInstrOffset 8
        Locals<3> v4 v5 v6
      }
    }
    Return v10
  }
}
---
CallFunctionKw
---
def callee(a, b):
  pass

def test(f):
  return f(a=1, b=2)

class C:
  def __init__(self, a, b):
    pass

test(callee)
test(C)
---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "f">
    v7:ImmortalLongExact[1] = LoadConst<ImmortalLongExact[1]>
    v8:ImmortalLongExact[2] = LoadConst<ImmortalLongExact[2]>
    v9:MortalTupleExact[tuple:0xdeadbeef] = LoadConst<MortalTupleExact[tuple:0xdeadbeef]>
    HintType<1, <Func>, <TypeExact>> v5
    v10:Object = VectorCallKW<3> v5 v7 v8 v9 {
      FrameState {
        NextInstrOffset 10
        Locals<1> v5
      }
    }
    Return v10
  }
}
---
