RefcountInsertionTest
---
RefcountInsertion
---
BorrowedReturnValuesAreIncrefed
---
def test(x):
  return x
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0; "x">
    Incref v1
    Return v1
  }
}
---
CopiesDieAcrossEdge
---
# HIR
fun test {
  bb 0 {
    v0 = MakeDict<0>
    v1 = CheckExc v0
    v2 = MakeDict<0>
    v3 = CheckExc v2
    v4 = Assign v1
    v5 = Assign v4
    v6 = Assign v1
    CondBranch<1, 2> v2
  }
  bb 1 {
    v7 = BinaryOp<Add> v4 v5
    v8 = CheckExc v7
    Branch<2>
  }
  bb 2 {
    Return v3
  }
}
---
fun test {
  bb 0 {
    v0:MortalDict = MakeDict<0> {
      NextInstrOffset 0
    }
    v1:MortalDict = CheckExc v0 {
      LiveValues<1> o:v0
      NextInstrOffset 0
    }
    v2:MortalDict = MakeDict<0> {
      LiveValues<1> o:v1
      NextInstrOffset 0
    }
    v3:MortalDict = CheckExc v2 {
      LiveValues<2> o:v1 o:v2
      NextInstrOffset 0
    }
    CondBranch<1, 3> v2
  }

  bb 1 (preds 0) {
    v7:Object = BinaryOp<Add> v1 v1 {
      LiveValues<2> o:v1 o:v3
      NextInstrOffset 0
    }
    Decref v1
    v8:Object = CheckExc v7 {
      LiveValues<2> o:v3 o:v7
      NextInstrOffset 0
    }
    Decref v8
    Branch<2>
  }

  bb 3 (preds 0) {
    Decref v1
    Branch<2>
  }

  bb 2 (preds 1, 3) {
    Return v3
  }
}
---
OwnedValueDyingAcrossEdgePromotesValueBorrowedFromIt
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = MakeDict<0>
    v2 = CheckExc v1
    CondBranch<1, 2> v0
  }
  bb 1 {
    Branch<3>
  }
  bb 2 {
    Branch<3>
  }
  bb 3 {
    v3 = Phi<1, 2> v0 v2
    CondBranch<4, 5> v2
  }
  bb 4 {
    Return v3
  }
  bb 5 {
    Return v2
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:MortalDict = MakeDict<0> {
      LiveValues<1> b:v0
      NextInstrOffset 0
    }
    v2:MortalDict = CheckExc v1 {
      LiveValues<2> b:v0 o:v1
      NextInstrOffset 0
    }
    CondBranch<1, 2> v0
  }

  bb 1 (preds 0) {
    Branch<3>
  }

  bb 2 (preds 0) {
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v3:Object = Phi<1, 2> v0 v2
    CondBranch<4, 5> v2
  }

  bb 4 (preds 3) {
    Incref v3
    Decref v2
    Return v3
  }

  bb 5 (preds 3) {
    Return v2
  }
}
---
OwnedValueDyingAcrossEdgeDoesntPromoteValueBorrowedFromOther
---
# HIR
fun test {
  bb 0 {
    v0 = LoadArg<0>
    v1 = MakeDict<0>
    v2 = CheckExc v1
    v3 = MakeDict<0>
    v4 = CheckExc v3
    CondBranch<1, 2> v0
  }
  bb 1 {
    Branch<3>
  }
  bb 2 {
    Branch<3>
  }
  bb 3 {
    v5 = Phi<1, 2> v0 v2
    CondBranch<4, 5> v2
  }
  bb 4 {
    v6 = VectorCall<0> v5
    v7 = CheckExc v6
    Return v2
  }
  bb 5 {
    Return v4
  }
}
---
fun test {
  bb 0 {
    v0:Object = LoadArg<0>
    v1:MortalDict = MakeDict<0> {
      LiveValues<1> b:v0
      NextInstrOffset 0
    }
    v2:MortalDict = CheckExc v1 {
      LiveValues<2> b:v0 o:v1
      NextInstrOffset 0
    }
    v3:MortalDict = MakeDict<0> {
      LiveValues<2> b:v0 o:v2
      NextInstrOffset 0
    }
    v4:MortalDict = CheckExc v3 {
      LiveValues<3> b:v0 o:v2 o:v3
      NextInstrOffset 0
    }
    CondBranch<1, 2> v0
  }

  bb 1 (preds 0) {
    Branch<3>
  }

  bb 2 (preds 0) {
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v5:Object = Phi<1, 2> v0 v2
    CondBranch<4, 5> v2
  }

  bb 4 (preds 3) {
    Decref v4
    v6:Object = VectorCall<0> v5 {
      LiveValues<2> o:v2 b:v5
      NextInstrOffset 0
    }
    v7:Object = CheckExc v6 {
      LiveValues<2> o:v2 o:v6
      NextInstrOffset 0
    }
    Decref v7
    Return v2
  }

  bb 5 (preds 3) {
    Return v4
  }
}
---
LoopUsingBorrowedValues
---
def test(a, b, l):
    s = a
    for x in l:
        print(s)
        s = b
    use(a, b)
---
fun jittestmodule:test {
  bb 0 {
    v14:Object = LoadArg<0; "a">
    v15:Object = LoadArg<1; "b">
    v16:Object = LoadArg<2; "l">
    v17:Nullptr = LoadConst<Nullptr>
    v21:Object = GetIter v16 {
      LiveValues<4> b:v14 b:v15 b:v16 unc:v17
      NextInstrOffset 8
      Locals<5> v14 v15 v16 v14 v17
    }
    Branch<4>
  }

  bb 4 (preds 0, 2) {
    v27:Object = Phi<0, 2> v14 v15
    v28:OptObject = Phi<0, 2> v17 v36
    v22:CInt32 = LoadEvalBreaker
    CondBranch<5, 1> v22
  }

  bb 5 (preds 4) {
    v29:Bool = RunPeriodicTasks {
      LiveValues<6> b:v14 b:v15 b:v16 o:v21 b:v27 o:v28
      NextInstrOffset 8
      Locals<5> v14 v15 v16 v27 v28
      Stack<1> v21
    }
    Branch<1>
  }

  bb 1 (preds 4, 5) {
    v36:Object = InvokeIterNext v21 {
      LiveValues<6> b:v14 b:v15 b:v16 o:v21 b:v27 o:v28
      NextInstrOffset 10
      Locals<5> v14 v15 v16 v27 v28
      Stack<1> v21
    }
    CondBranchIterNotDone<2, 3> v36
  }

  bb 2 (preds 1) {
    v38:OptObject = LoadGlobalCached<0; "print">
    v39:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v38 {
      Descr 'LOAD_GLOBAL: print'
      LiveValues<8> b:v14 b:v15 b:v16 o:v21 b:v27 o:v28 o:v36 b:v38
      NextInstrOffset 10
      Locals<5> v14 v15 v16 v27 v28
      Stack<2> v21 v36
    }
    XDecref v28
    v41:Object = VectorCall<1> v39 v27 {
      LiveValues<7> b:v14 b:v15 b:v16 o:v21 b:v27 o:v36 b:v39
      NextInstrOffset 18
      Locals<5> v14 v15 v16 v27 v36
      Stack<1> v21
    }
    Decref v41
    Branch<4>
  }

  bb 3 (preds 1) {
    Decref v21
    v44:Object = LoadGlobal<1; "use"> {
      LiveValues<5> b:v14 b:v15 b:v16 b:v27 o:v28
      NextInstrOffset 28
      Locals<5> v14 v15 v16 v27 v28
    }
    v47:Object = VectorCall<2> v44 v14 v15 {
      LiveValues<6> b:v14 b:v15 b:v16 b:v27 o:v28 o:v44
      NextInstrOffset 34
      Locals<5> v14 v15 v16 v27 v28
    }
    XDecref v28
    Decref v44
    Decref v47
    v48:NoneType = LoadConst<NoneType>
    Incref v48
    Return v48
  }
}
---
LoopUsingOwnedValues
---
def test(l):
    a = something()
    b = something_else()
    s = a
    for x in l:
        print(s)
        s = b
    use(a, b)
---
fun jittestmodule:test {
  bb 0 {
    v18:Object = LoadArg<0; "l">
    v19:Nullptr = LoadConst<Nullptr>
    v20:Object = LoadGlobal<0; "something"> {
      LiveValues<2> b:v18 unc:v19
      NextInstrOffset 2
      Locals<5> v18 v19 v19 v19 v19
    }
    v21:Object = VectorCall<0> v20 {
      LiveValues<3> b:v18 unc:v19 o:v20
      NextInstrOffset 4
      Locals<5> v18 v19 v19 v19 v19
    }
    Decref v20
    v23:Object = LoadGlobal<1; "something_else"> {
      LiveValues<3> b:v18 unc:v19 o:v21
      NextInstrOffset 8
      Locals<5> v18 v21 v19 v19 v19
    }
    v24:Object = VectorCall<0> v23 {
      LiveValues<4> b:v18 unc:v19 o:v21 o:v23
      NextInstrOffset 10
      Locals<5> v18 v21 v19 v19 v19
    }
    Decref v23
    v29:Object = GetIter v18 {
      LiveValues<4> b:v18 unc:v19 o:v21 o:v24
      NextInstrOffset 20
      Locals<5> v18 v21 v24 v21 v19
    }
    Branch<4>
  }

  bb 4 (preds 0, 2) {
    v36:Object = Phi<0, 2> v21 v24
    v37:OptObject = Phi<0, 2> v19 v45
    v31:CInt32 = LoadEvalBreaker
    CondBranch<5, 1> v31
  }

  bb 5 (preds 4) {
    v38:Bool = RunPeriodicTasks {
      LiveValues<6> b:v18 o:v21 o:v24 o:v29 b:v36 o:v37
      NextInstrOffset 20
      Locals<5> v18 v21 v24 v36 v37
      Stack<1> v29
    }
    Branch<1>
  }

  bb 1 (preds 4, 5) {
    v45:Object = InvokeIterNext v29 {
      LiveValues<6> b:v18 o:v21 o:v24 o:v29 b:v36 o:v37
      NextInstrOffset 22
      Locals<5> v18 v21 v24 v36 v37
      Stack<1> v29
    }
    CondBranchIterNotDone<2, 3> v45
  }

  bb 2 (preds 1) {
    v48:OptObject = LoadGlobalCached<2; "print">
    v49:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v48 {
      Descr 'LOAD_GLOBAL: print'
      LiveValues<8> b:v18 o:v21 o:v24 o:v29 b:v36 o:v37 o:v45 b:v48
      NextInstrOffset 22
      Locals<5> v18 v21 v24 v36 v37
      Stack<2> v29 v45
    }
    XDecref v37
    v51:Object = VectorCall<1> v49 v36 {
      LiveValues<7> b:v18 o:v21 o:v24 o:v29 b:v36 o:v45 b:v49
      NextInstrOffset 30
      Locals<5> v18 v21 v24 v36 v45
      Stack<1> v29
    }
    Decref v51
    Branch<4>
  }

  bb 3 (preds 1) {
    Decref v29
    v54:Object = LoadGlobal<3; "use"> {
      LiveValues<5> b:v18 o:v21 o:v24 b:v36 o:v37
      NextInstrOffset 40
      Locals<5> v18 v21 v24 v36 v37
    }
    v57:Object = VectorCall<2> v54 v21 v24 {
      LiveValues<6> b:v18 o:v21 o:v24 b:v36 o:v37 o:v54
      NextInstrOffset 46
      Locals<5> v18 v21 v24 v36 v37
    }
    Decref v21
    Decref v24
    XDecref v37
    Decref v54
    Decref v57
    v58:NoneType = LoadConst<NoneType>
    Incref v58
    Return v58
  }
}
---
LoopUsingTransientValues
---
def test(l):
    s = something()
    for x in l:
        print(s)
        s = something_else()
---
fun jittestmodule:test {
  bb 0 {
    v14:Object = LoadArg<0; "l">
    v15:Nullptr = LoadConst<Nullptr>
    v16:Object = LoadGlobal<0; "something"> {
      LiveValues<2> b:v14 unc:v15
      NextInstrOffset 2
      Locals<3> v14 v15 v15
    }
    v17:Object = VectorCall<0> v16 {
      LiveValues<3> b:v14 unc:v15 o:v16
      NextInstrOffset 4
      Locals<3> v14 v15 v15
    }
    Decref v16
    v20:Object = GetIter v14 {
      LiveValues<3> b:v14 unc:v15 o:v17
      NextInstrOffset 10
      Locals<3> v14 v17 v15
    }
    Branch<4>
  }

  bb 4 (preds 0, 2) {
    v25:Object = Phi<0, 2> v17 v40
    v26:OptObject = Phi<0, 2> v15 v32
    v22:CInt32 = LoadEvalBreaker
    CondBranch<5, 1> v22
  }

  bb 5 (preds 4) {
    v27:Bool = RunPeriodicTasks {
      LiveValues<4> b:v14 o:v20 o:v25 o:v26
      NextInstrOffset 10
      Locals<3> v14 v25 v26
      Stack<1> v20
    }
    Branch<1>
  }

  bb 1 (preds 4, 5) {
    v32:Object = InvokeIterNext v20 {
      LiveValues<4> b:v14 o:v20 o:v25 o:v26
      NextInstrOffset 12
      Locals<3> v14 v25 v26
      Stack<1> v20
    }
    CondBranchIterNotDone<2, 3> v32
  }

  bb 2 (preds 1) {
    v35:OptObject = LoadGlobalCached<1; "print">
    v36:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v35 {
      Descr 'LOAD_GLOBAL: print'
      LiveValues<6> b:v14 o:v20 o:v25 o:v26 o:v32 b:v35
      NextInstrOffset 12
      Locals<3> v14 v25 v26
      Stack<2> v20 v32
    }
    XDecref v26
    v38:Object = VectorCall<1> v36 v25 {
      LiveValues<5> b:v14 o:v20 o:v25 o:v32 b:v36
      NextInstrOffset 20
      Locals<3> v14 v25 v32
      Stack<1> v20
    }
    Decref v38
    v39:Object = LoadGlobal<2; "something_else"> {
      LiveValues<4> b:v14 o:v20 o:v25 o:v32
      NextInstrOffset 24
      Locals<3> v14 v25 v32
      Stack<1> v20
    }
    v40:Object = VectorCall<0> v39 {
      LiveValues<5> b:v14 o:v20 o:v25 o:v32 o:v39
      NextInstrOffset 26
      Locals<3> v14 v25 v32
      Stack<1> v20
    }
    Decref v25
    Decref v39
    Branch<4>
  }

  bb 3 (preds 1) {
    Decref v20
    Decref v25
    XDecref v26
    v42:NoneType = LoadConst<NoneType>
    Incref v42
    Return v42
  }
}
---
HandlesStoreAttr
---
def test(x, val):
  x.foo = val
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "x">
    v5:Object = LoadArg<1; "val">
    v8:NoneType = StoreAttr<0; "foo"> v4 v5 {
      LiveValues<2> b:v4 b:v5
      NextInstrOffset 6
      Locals<2> v4 v5
    }
    v9:NoneType = LoadConst<NoneType>
    Incref v9
    Return v9
  }
}
---
HandlesLoadGlobalCached
---
def test():
  return a_global
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadGlobal<0; "a_global"> {
      NextInstrOffset 2
    }
    Return v1
  }
}
---
InitListTuple
---
def test(a):
  return (a, a, a)
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "a">
    v7:MortalTupleExact = MakeListTuple<tuple, 3> {
      LiveValues<1> b:v3
      NextInstrOffset 8
      Locals<1> v3
      Stack<3> v3 v3 v3
    }
    Incref v3
    Incref v3
    Incref v3
    InitListTuple<tuple, 3> v7 v3 v3 v3
    Return v7
  }
}
---
ConditionalInitializedWithArgOrConst
---
def test(pred, val):
    if pred:
        x = val
    else:
        x = 1
    return x
---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "pred">
    v6:Object = LoadArg<1; "val">
    v7:Nullptr = LoadConst<Nullptr>
    v9:CInt32 = IsTruthy v5 {
      LiveValues<3> b:v5 b:v6 unc:v7
      NextInstrOffset 4
      Locals<3> v5 v6 v7
    }
    CondBranch<1, 2> v9
  }

  bb 1 (preds 0) {
    Branch<3>
  }

  bb 2 (preds 0) {
    v12:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v16:Object = Phi<1, 2> v6 v12
    Incref v16
    Return v16
  }
}
---
ReassignArgToConst
---
def test(val):
    x = 1
    return x
---
fun jittestmodule:test {
  bb 0 {
    v5:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Incref v5
    Return v5
  }
}
---
LoadCellItemOutputIsIncrefed
---
def test(a):
  a.foo()
  def g():
    return a
  return g
---
fun jittestmodule:test {
  bb 0 {
    v12:Object = LoadArg<0; "a">
    v13:Nullptr = LoadConst<Nullptr>
    v14:MortalCell = MakeCell v12 {
      LiveValues<2> b:v12 unc:v13
      NextInstrOffset 0
      Locals<2> v12 v13
      Cells<1> v13
    }
    v15:OptObject = LoadCellItem v14
    v16:Object = CheckVar<"a"> v15 {
      LiveValues<3> unc:v13 o:v14 b:v15
      NextInstrOffset 2
      Locals<2> v13 v13
      Cells<1> v14
    }
    Incref v16
    v17:Object = LoadMethod<0; "foo"> v16 {
      LiveValues<3> unc:v13 o:v14 o:v16
      NextInstrOffset 4
      Locals<2> v13 v13
      Cells<1> v14
      Stack<1> v16
    }
    v18:Object = CallMethod<2> v16 v17 {
      LiveValues<4> unc:v13 o:v14 o:v16 o:v17
      NextInstrOffset 6
      Locals<2> v13 v13
      Cells<1> v14
    }
    Decref v16
    Decref v17
    Decref v18
    v19:MortalTupleExact = MakeListTuple<tuple, 1> {
      LiveValues<2> unc:v13 o:v14
      NextInstrOffset 12
      Locals<2> v13 v13
      Cells<1> v14
      Stack<1> v14
    }
    Incref v14
    InitListTuple<tuple, 1> v19 v14
    v21:MortalCode["g"] = LoadConst<MortalCode["g"]>
    v22:MortalUnicodeExact["test.<locals>.g"] = LoadConst<MortalUnicodeExact["test.<locals>.g"]>
    v23:MortalFunc = MakeFunction v22 v21 {
      LiveValues<5> unc:v13 o:v14 o:v19 b:v21 b:v22
      NextInstrOffset 18
      Locals<2> v13 v13
      Cells<1> v14
      Stack<1> v19
    }
    Decref v14
    SetFunctionAttr<func_closure> v19 v23
    InitFunction v23
    Return v23
  }
}
---
XIncrefUsedOnMaybeInitializedValue
---
def test(timings):
    if timings:
        total_time = 0
    if timings:
        total_time = total_time + 1
    if timings:
        print(total_time)
---
fun jittestmodule:test {
  bb 0 {
    v11:Object = LoadArg<0; "timings">
    v12:Nullptr = LoadConst<Nullptr>
    v14:CInt32 = IsTruthy v11 {
      LiveValues<2> b:v11 unc:v12
      NextInstrOffset 4
      Locals<2> v11 v12
    }
    CondBranch<1, 7> v14
  }

  bb 1 (preds 0) {
    v15:MortalLongExact[0] = LoadConst<MortalLongExact[0]>
    Branch<2>
  }

  bb 7 (preds 0) {
    Branch<2>
  }

  bb 2 (preds 1, 7) {
    v18:OptMortalLongExact = Phi<1, 7> v15 v12
    v20:CInt32 = IsTruthy v11 {
      LiveValues<2> b:v11 b:v18
      NextInstrOffset 12
      Locals<2> v11 v18
    }
    CondBranch<3, 8> v20
  }

  bb 3 (preds 2) {
    v21:MortalLongExact = CheckVar<"total_time"> v18 {
      LiveValues<2> b:v11 b:v18
      NextInstrOffset 14
      Locals<2> v11 v18
    }
    v22:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v23:Object = BinaryOp<Add> v21 v22 {
      LiveValues<3> b:v11 b:v21 b:v22
      NextInstrOffset 18
      Locals<2> v11 v21
    }
    Branch<4>
  }

  bb 8 (preds 2) {
    XIncref v18
    Branch<4>
  }

  bb 4 (preds 3, 8) {
    v26:OptObject = Phi<3, 8> v23 v18
    v28:CInt32 = IsTruthy v11 {
      LiveValues<2> b:v11 o:v26
      NextInstrOffset 24
      Locals<2> v11 v26
    }
    CondBranch<5, 9> v28
  }

  bb 5 (preds 4) {
    v29:OptObject = LoadGlobalCached<0; "print">
    v30:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v29 {
      Descr 'LOAD_GLOBAL: print'
      LiveValues<3> b:v11 o:v26 b:v29
      NextInstrOffset 24
      Locals<2> v11 v26
    }
    v31:Object = CheckVar<"total_time"> v26 {
      LiveValues<3> b:v11 o:v26 b:v30
      NextInstrOffset 28
      Locals<2> v11 v26
      Stack<1> v30
    }
    v32:Object = VectorCall<1> v30 v31 {
      LiveValues<3> b:v11 b:v30 o:v31
      NextInstrOffset 30
      Locals<2> v11 v31
    }
    Decref v31
    Decref v32
    Branch<6>
  }

  bb 9 (preds 4) {
    XDecref v26
    Branch<6>
  }

  bb 6 (preds 5, 9) {
    v35:NoneType = LoadConst<NoneType>
    Incref v35
    Return v35
  }
}
---
ValueBorrowedFromDeadPhiInputHasCorrectSupport
---
def test(a, b, c):
    v = dict()
    if b:
        a = v
    print(v)
    if c:
        b = v
        v = None
    # a should now borrowed from the original arg or b, not v
    b = None
    print(a)
---
fun jittestmodule:test {
  bb 0 {
    v15:Object = LoadArg<0; "a">
    v16:Object = LoadArg<1; "b">
    v17:Object = LoadArg<2; "c">
    v18:Nullptr = LoadConst<Nullptr>
    v19:OptObject = LoadGlobalCached<0; "dict">
    v20:MortalTypeExact[dict:obj] = GuardIs<0xdeadbeef> v19 {
      Descr 'LOAD_GLOBAL: dict'
      LiveValues<5> b:v15 b:v16 b:v17 unc:v18 b:v19
      NextInstrOffset 0
      Locals<4> v15 v16 v17 v18
    }
    v21:Object = VectorCall<0> v20 {
      LiveValues<5> b:v15 b:v16 b:v17 unc:v18 b:v20
      NextInstrOffset 4
      Locals<4> v15 v16 v17 v18
    }
    v24:CInt32 = IsTruthy v16 {
      LiveValues<4> b:v15 b:v16 b:v17 o:v21
      NextInstrOffset 10
      Locals<4> v15 v16 v17 v21
    }
    CondBranch<1, 5> v24
  }

  bb 1 (preds 0) {
    Branch<2>
  }

  bb 5 (preds 0) {
    Branch<2>
  }

  bb 2 (preds 1, 5) {
    v27:Object = Phi<1, 5> v21 v15
    v31:OptObject = LoadGlobalCached<1; "print">
    v32:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v31 {
      Descr 'LOAD_GLOBAL: print'
      LiveValues<5> b:v16 b:v17 o:v21 b:v27 b:v31
      NextInstrOffset 14
      Locals<4> v27 v16 v17 v21
    }
    v34:Object = VectorCall<1> v32 v21 {
      LiveValues<5> b:v16 b:v17 o:v21 b:v27 b:v32
      NextInstrOffset 20
      Locals<4> v27 v16 v17 v21
    }
    Decref v34
    v36:CInt32 = IsTruthy v17 {
      LiveValues<4> b:v16 b:v17 o:v21 b:v27
      NextInstrOffset 26
      Locals<4> v27 v16 v17 v21
    }
    CondBranch<3, 6> v36
  }

  bb 3 (preds 2) {
    v39:NoneType = LoadConst<NoneType>
    Incref v39
    Branch<4>
  }

  bb 6 (preds 2) {
    Incref v16
    Branch<4>
  }

  bb 4 (preds 3, 6) {
    v42:Object = Phi<3, 6> v21 v16
    v44:Object = Phi<3, 6> v39 v21
    v45:NoneType = LoadConst<NoneType>
    v47:OptObject = LoadGlobalCached<1; "print">
    v48:MortalObjectUser[builtin_function_or_method:0xdeadbeef] = GuardIs<0xdeadbeef> v47 {
      Descr 'LOAD_GLOBAL: print'
      LiveValues<6> b:v17 b:v27 o:v42 o:v44 b:v45 b:v47
      NextInstrOffset 34
      Locals<4> v27 v42 v17 v44
    }
    Incref v27
    Decref v42
    v50:Object = VectorCall<1> v48 v27 {
      LiveValues<5> b:v17 o:v27 o:v44 b:v45 b:v48
      NextInstrOffset 44
      Locals<4> v27 v45 v17 v44
    }
    Decref v27
    Decref v44
    Decref v50
    v51:NoneType = LoadConst<NoneType>
    Incref v51
    Return v51
  }
}
---
MustNotBeImmortal
---
# HIR
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "a">
    v7:Object = LoadArg<1; "b">
    v8:Nullptr = LoadConst<Nullptr>
    v11:ListExact = MakeListTuple<list, 2> {
      LiveValues<3> b:v6 b:v7 unc:v8
      NextInstrOffset 6
      Locals<3> v6 v7 v8
      Stack<2> v6 v7
    }
    InitListTuple<list, 2> v11 v6 v7
    v14:NoneType = LoadConst<NoneType>
    Return v14
  }
}
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0>
    v7:Object = LoadArg<1>
    v8:Nullptr = LoadConst<Nullptr>
    v11:MortalListExact = MakeListTuple<list, 2> {
      LiveValues<6> b:v6 b:v6 b:v7 b:v7 unc:v8 unc:v8
      NextInstrOffset 6
      Locals<3> v6 v7 v8
      Stack<2> v6 v7
    }
    Incref v6
    Incref v7
    InitListTuple<list, 2> v11 v6 v7
    Decref v11
    v14:NoneType = LoadConst<NoneType>
    Incref v14
    Return v14
  }
}
---
