TestSuperAccess
---
---
SuperStoreAttrNotOptimized
---
class A:
    def f(self):
      super().x = 1
test = A.f
---
fun jittestmodule:A.f {
  bb 0 {
    v0 = LoadArg<0; "self">
    v1 = LoadClosureCell<0>
    v2 = LoadConst<LongExact[1]>
    v3 = LoadGlobalCached<0; "super">
    v3 = GuardIs<0xdeadbeef> v3
    v4 = VectorCall<0> v3 {
      NextInstrOffset 8
      Locals<1> v0
      Cells<1> v1
      Stack<1> v2
    }
    v5 = StoreAttr<1; "x"> v4 v2 {
      NextInstrOffset 10
      Locals<1> v0
      Cells<1> v1
    }
    v6 = LoadConst<NoneType>
    Return v6
  }
}
---
SuperLoadAttr
---
class A:
    def f(self):
      return super().f
test = A.f
---
fun jittestmodule:A.f {
  bb 0 {
    v0 = LoadArg<0; "self">
    v1 = LoadClosureCell<0>
    v2 = LoadGlobalCached<0; "super">
    v2 = GuardIs<0xdeadbeef> v2
    v3 = LoadCellItem v1
    v3 = CheckVar<0; "__class__"> v3 {
      NextInstrOffset 0
    }
    v0 = CheckVar<0; "self"> v0 {
      NextInstrOffset 8
      Locals<1> v0
      Cells<1> v1
      Stack<2> v2 v3
    }
    v4 = LoadAttrSuper<1; "f", true> v2 v3 v0 {
      NextInstrOffset 10
      Locals<1> v0
      Cells<1> v1
    }
    Return v4
  }
}
---
MethodCallWithSuperLoadAttr
---
class A:
    def f(self):
      super().f(a=1)
test = A.f
---
fun jittestmodule:A.f {
  bb 0 {
    v0 = LoadArg<0; "self">
    v1 = LoadClosureCell<0>
    v2 = LoadGlobalCached<0; "super">
    v2 = GuardIs<0xdeadbeef> v2
    v3 = LoadCellItem v1
    v3 = CheckVar<0; "__class__"> v3 {
      NextInstrOffset 0
    }
    v0 = CheckVar<0; "self"> v0 {
      NextInstrOffset 8
      Locals<1> v0
      Cells<1> v1
      Stack<2> v2 v3
    }
    v4 = LoadAttrSuper<1; "f", true> v2 v3 v0 {
      NextInstrOffset 10
      Locals<1> v0
      Cells<1> v1
    }
    v5 = LoadConst<LongExact[1]>
    v6 = LoadConst<TupleExact[tuple:0xdeadbeef]>
    v7 = VectorCallKW<2> v4 v5 v6 {
      NextInstrOffset 16
      Locals<1> v0
      Cells<1> v1
    }
    v8 = LoadConst<NoneType>
    Return v8
  }
}
---
MethodCallWithSuper
---
class A:
    def f(self):
      super().f()
test = A.f
---
fun jittestmodule:A.f {
  bb 0 {
    v0 = LoadArg<0; "self">
    v1 = LoadClosureCell<0>
    v2 = LoadGlobalCached<0; "super">
    v2 = GuardIs<0xdeadbeef> v2
    v3 = LoadCellItem v1
    v3 = CheckVar<0; "__class__"> v3 {
      NextInstrOffset 0
    }
    v0 = CheckVar<0; "self"> v0 {
      NextInstrOffset 8
      Locals<1> v0
      Cells<1> v1
      Stack<2> v2 v3
    }
    v4 = LoadMethodSuper<1; "f", true> v2 v3 v0 {
      NextInstrOffset 10
      Locals<1> v0
      Cells<1> v1
      Stack<1> v0
    }
    v5 = CallMethod<2> v0 v4 {
      NextInstrOffset 12
      Locals<1> v0
      Cells<1> v1
    }
    v6 = LoadConst<NoneType>
    Return v6
  }
}
---
