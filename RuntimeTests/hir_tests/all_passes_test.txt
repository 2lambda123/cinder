AllPassesTest
---
@AllPasses
---
ReturnConstant
---
def test():
  return 1
---
fun jittestmodule:test {
  bb 0 {
    v1:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Incref v1
    Return v1
  }
}
---
IfIsinstanceEmitsLoadFieldAndIsInstance
---
def test(x):
  if isinstance(x, str):
    return 1
  return 2
---
fun jittestmodule:test {
  bb 0 {
    v7:Object = LoadArg<0; "x">
    v8:OptObject = LoadGlobalCached<0; "isinstance">
    v9:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: isinstance'
      LiveValues<2> b:v7 b:v8
      FrameState {
        NextInstrOffset 0
        Locals<1> v7
      }
    }
    v11:OptObject = LoadGlobalCached<1; "str">
    v12:MortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v11 {
      Descr 'LOAD_GLOBAL: str'
      LiveValues<3> b:v7 b:v9 b:v11
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
        Stack<1> v9
      }
    }
    v17:Type = LoadField<ob_type@8, Type, borrowed> v7
    v18:CBool = PrimitiveCompare<Equal> v17 v12
    CondBranch<1, 3> v18
  }

  bb 3 (preds 0) {
    v14:CInt32 = IsInstance v7 v12 {
      LiveValues<2> b:v7 b:v12
      FrameState {
        NextInstrOffset 10
        Locals<1> v7
      }
    }
    CondBranch<1, 2> v14
  }

  bb 1 (preds 0, 3) {
    v15:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Incref v15
    Return v15
  }

  bb 2 (preds 3) {
    v16:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    Incref v16
    Return v16
  }
}
---
