AllPassesTest
---
@AllPasses
---
ReturnConstant
---
def test():
  return 1
---
fun jittestmodule:test {
  bb 0 {
    v1:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Incref v1
    Return v1
  }
}
---
IfIsinstanceEmitsLoadFieldAndIsInstance
---
def test(x):
  if isinstance(x, str):
    return 1
  return 2
---
fun jittestmodule:test {
  bb 0 {
    v7:Object = LoadArg<0; "x">
    v8:OptObject = LoadGlobalCached<0; "isinstance">
    v9:MortalObjectUser[builtin_function_or_method:isinstance:0xdeadbeef] = GuardIs<0xdeadbeef> v8 {
      Descr 'LOAD_GLOBAL: isinstance'
      LiveValues<2> b:v7 b:v8
      FrameState {
        NextInstrOffset 0
        Locals<1> v7
      }
    }
    v11:OptObject = LoadGlobalCached<1; "str">
    v12:MortalTypeExact[str:obj] = GuardIs<0xdeadbeef> v11 {
      Descr 'LOAD_GLOBAL: str'
      LiveValues<3> b:v7 b:v9 b:v11
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
        Stack<1> v9
      }
    }
    v17:Type = LoadField<ob_type@8, Type, borrowed> v7
    v18:CBool = PrimitiveCompare<Equal> v17 v12
    CondBranch<1, 3> v18
  }

  bb 3 (preds 0) {
    v14:CInt32 = IsInstance v7 v12 {
      LiveValues<2> b:v7 b:v12
      FrameState {
        NextInstrOffset 10
        Locals<1> v7
      }
    }
    CondBranch<1, 2> v14
  }

  bb 1 (preds 0, 3) {
    v15:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    Incref v15
    Return v15
  }

  bb 2 (preds 3) {
    v16:MortalLongExact[2] = LoadConst<MortalLongExact[2]>
    Incref v16
    Return v16
  }
}
---
LenReturnsLongExact
---
g = [1,2,3]
def test():
  return len(g)
---
fun jittestmodule:test {
  bb 0 {
    v3:OptObject = LoadGlobalCached<0; "len">
    v4:MortalObjectUser[builtin_function_or_method:len:0xdeadbeef] = GuardIs<0xdeadbeef> v3 {
      Descr 'LOAD_GLOBAL: len'
      LiveValues<1> b:v3
      FrameState {
        NextInstrOffset 0
      }
    }
    v5:OptObject = LoadGlobalCached<1; "g">
    v6:MortalListExact[list:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: g'
      LiveValues<2> b:v4 b:v5
      FrameState {
        NextInstrOffset 2
        Stack<1> v4
      }
    }
    v9:CInt64 = LoadField<ob_size@16, CInt64, borrowed> v6
    v10:LongExact = PrimitiveBox<CInt64> v9 {
      LiveValues<1> s:v9
      FrameState {
        NextInstrOffset 6
      }
    }
    Return v10
  }
}
---
HasattrReturnsBool
---
def test(obj):
    return hasattr(obj, "foo")
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "obj">
    v5:OptObject = LoadGlobalCached<0; "hasattr">
    v6:MortalObjectUser[builtin_function_or_method:hasattr:0xdeadbeef] = GuardIs<0xdeadbeef> v5 {
      Descr 'LOAD_GLOBAL: hasattr'
      LiveValues<2> b:v4 b:v5
      FrameState {
        NextInstrOffset 0
        Locals<1> v4
      }
    }
    v8:MortalUnicodeExact["foo"] = LoadConst<MortalUnicodeExact["foo"]>
    v9:Bool = VectorCall<2> v6 v4 v8 {
      LiveValues<3> b:v4 b:v6 b:v8
      FrameState {
        NextInstrOffset 8
        Locals<1> v4
      }
    }
    Return v9
  }
}
---
CompareInReturnsBool
---
def test(x, y):
  return x in y
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v7:Bool = Compare<In> v3 v4 {
      LiveValues<2> b:v3 b:v4
      FrameState {
        NextInstrOffset 6
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
---
CompareNotInReturnsBool
---
def test(x, y):
  return x not in y
---
fun jittestmodule:test {
  bb 0 {
    v3:Object = LoadArg<0; "x">
    v4:Object = LoadArg<1; "y">
    v7:Bool = Compare<NotIn> v3 v4 {
      LiveValues<2> b:v3 b:v4
      FrameState {
        NextInstrOffset 6
        Locals<2> v3 v4
      }
    }
    Return v7
  }
}
---
ListAppendMethodEmitsListAppend
---
def test():
  x = []
  x.append(1)
---
fun jittestmodule:test {
  bb 0 {
    v7:Nullptr = LoadConst<Nullptr>
    v8:MortalListExact = MakeList<0> {
      LiveValues<1> unc:v7
      FrameState {
        NextInstrOffset 2
        Locals<1> v7
      }
    }
    v13:MortalLongExact[1] = LoadConst<MortalLongExact[1]>
    v16:CInt32 = ListAppend v8 v13 {
      LiveValues<2> o:v8 b:v13
      FrameState {
        NextInstrOffset 12
        Locals<1> v8
      }
    }
    Decref v8
    v15:NoneType = LoadConst<NoneType>
    Incref v15
    Return v15
  }
}
---
