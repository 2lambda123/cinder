SimplifyStaticTest
---
Simplify
---
UnboxOfRandMaxIsEliminated
---
from __static__ import rand, RAND_MAX, box, int64
def test():
    x: int64 = rand() // int64(RAND_MAX)
    return box(x)
---
fun jittestmodule:test {
  bb 0 {
    v9:Nullptr = LoadConst<Nullptr>
    v10:CInt32 = CallStatic<0>
    v11:CInt64 = IntConvert<CInt64> v10
    v12:LongExact[2147483647] = LoadConst<LongExact[2147483647]>
    v19:CInt64[2147483647] = LoadConst<CInt64[2147483647]>
    v20:CInt64[0] = LoadConst<CInt64[0]>
    v15:CInt64 = IntBinaryOp<FloorDivide> v11 v19
    v17:OptLongExact = PrimitiveBox<true> v15
    v18:LongExact = CheckExc v17 {
      NextInstrOffset 20
      Locals<1> v15
    }
    Return v18
  }
}
---
UnboxOfFinalIsEliminated
---
from typing import Final
from __static__ import int64, unbox

MY_FINAL: Final[int] = 111

def test() -> bool:
    i: int64 = 64
    if i < unbox(MY_FINAL):
        return True
    else:
        return False
---
fun jittestmodule:test {
  bb 0 {
    v8:Nullptr = LoadConst<Nullptr>
    v9:CInt64[64] = LoadConst<CInt64[64]>
    v11:LongExact[111] = LoadConst<LongExact[111]>
    v17:CInt64[111] = LoadConst<CInt64[111]>
    v18:CInt64[0] = LoadConst<CInt64[0]>
    v14:CBool = PrimitiveCompare<LessThan> v9 v17
    CondBranch<1, 2> v14
  }

  bb 1 (preds 0) {
    v15:Bool[True] = LoadConst<Bool[True]>
    Return v15
  }

  bb 2 (preds 0) {
    v16:Bool[False] = LoadConst<Bool[False]>
    Return v16
  }
}
---
UnboxOfFinalDoubleIsEliminated
---
from typing import Final
from __static__ import double, unbox

MY_FINAL: Final[float] = 1.23

def test() -> double:
    d: double = unbox(MY_FINAL)
    return d
---
fun jittestmodule:test {
  bb 0 {
    v3:Nullptr = LoadConst<Nullptr>
    v4:FloatExact[1.23] = LoadConst<FloatExact[1.23]>
    v5:CDouble = LoadField<16> v4
    Return<CDouble> v5
  }
}
---
UnboxOfFinalUnsignedIsEliminated
---
from typing import Final
from __static__ import uint8, unbox

MY_FINAL: Final[int] = 42

def test() -> uint8:
    u: uint8 = unbox(MY_FINAL)
    return u
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:LongExact[42] = LoadConst<LongExact[42]>
    v9:CUInt8[42] = LoadConst<CUInt8[42]>
    v10:CInt64[0] = LoadConst<CInt64[0]>
    Return<CUInt8> v9
  }
}
---
