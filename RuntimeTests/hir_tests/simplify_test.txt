SimplifyTest
---
Simplify
---
LoadTupleItemToLoadConst
---
def test(a, b):
    baddict = {
        "aaa": a,
        "bbb": b}

    return baddict
---
fun jittestmodule:test {
  bb 0 {
    v9:Object = LoadArg<0; "a">
    v10:Object = LoadArg<1; "b">
    v11:Nullptr = LoadConst<Nullptr>
    v14:TupleExact[tuple:0xdeadbeef] = LoadConst<TupleExact[tuple:0xdeadbeef]>
    v15:Dict = MakeDict<2> {
      NextInstrOffset 8
      Locals<3> v9 v10 v11
      Stack<3> v9 v10 v14
    }
    v22:UnicodeExact["aaa"] = LoadConst<UnicodeExact["aaa"]>
    v17:CInt32 = SetDictItem v15 v22 v9 {
      NextInstrOffset 8
      Locals<3> v9 v10 v11
      Stack<2> v9 v10
    }
    v23:UnicodeExact["bbb"] = LoadConst<UnicodeExact["bbb"]>
    v19:CInt32 = SetDictItem v15 v23 v10 {
      NextInstrOffset 8
      Locals<3> v9 v10 v11
      Stack<2> v9 v10
    }
    Return v15
  }
}
---
LoadConstRedundantConversion
---
from __static__ import box, int64

def test():
    x: int64 = 0
    return box(x)
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:LongExact[0] = LoadConst<LongExact[0]>
    v7:OptObject = LoadGlobalCached<0; "box">
    v8:Func[function:0xdeadbeef] = GuardIs<0xdeadbeef> v7
    v10:Object = VectorCall<1> v8 v5 {
      NextInstrOffset 10
      Locals<1> v5
    }
    Return v10
  }
}
---
ArgumentsAreUnchecked
---
def test(x):
  return x
---
fun jittestmodule:test {
  bb 0 {
    v1:Object = LoadArg<0; "x">
    Return v1
  }
}
---
VariablesAreUncheckedWhenAssigned
---
def test():
  x = 1
  return x
---
fun jittestmodule:test {
  bb 0 {
    v2:Nullptr = LoadConst<Nullptr>
    v3:LongExact[1] = LoadConst<LongExact[1]>
    Return v3
  }
}
---
VariablesAreCheckedIfConditionallyAssigned
---
def test(x):
  if x:
    y = 1
  return y
---
fun jittestmodule:test {
  bb 0 {
    v4:Object = LoadArg<0; "x">
    v5:Nullptr = LoadConst<Nullptr>
    v7:CInt32 = IsTruthy v4 {
      NextInstrOffset 4
      Locals<2> v4 v5
    }
    CondBranch<1, 2> v7
  }

  bb 1 (preds 0) {
    v8:LongExact[1] = LoadConst<LongExact[1]>
    Branch<2>
  }

  bb 2 (preds 0, 1) {
    v11:OptLongExact = Phi<0, 1> v5 v8
    v12:LongExact = CheckVar<1; "y"> v11 {
      NextInstrOffset 10
      Locals<2> v4 v11
    }
    Return v12
  }
}
---
VariablesAreUncheckedIfAssignedOnAllFlows
---
def test(x):
  if x:
    y = 1
  else:
    y = 2
  return y
---
fun jittestmodule:test {
  bb 0 {
    v5:Object = LoadArg<0; "x">
    v6:Nullptr = LoadConst<Nullptr>
    v8:CInt32 = IsTruthy v5 {
      NextInstrOffset 4
      Locals<2> v5 v6
    }
    CondBranch<1, 2> v8
  }

  bb 1 (preds 0) {
    v9:LongExact[1] = LoadConst<LongExact[1]>
    Branch<3>
  }

  bb 2 (preds 0) {
    v11:LongExact[2] = LoadConst<LongExact[2]>
    Branch<3>
  }

  bb 3 (preds 1, 2) {
    v14:LongExact = Phi<1, 2> v9 v11
    Return v14
  }
}
---
VariablesAreUncheckedOnSubgraphsWhereAssigned
---
def test(x):
  if x:
    y = 1
    if y:
      return 100
  return y
---
fun jittestmodule:test {
  bb 0 {
    v6:Object = LoadArg<0; "x">
    v7:Nullptr = LoadConst<Nullptr>
    v9:CInt32 = IsTruthy v6 {
      NextInstrOffset 4
      Locals<2> v6 v7
    }
    CondBranch<1, 3> v9
  }

  bb 1 (preds 0) {
    v10:LongExact[1] = LoadConst<LongExact[1]>
    v13:CInt32 = IsTruthy v10 {
      NextInstrOffset 12
      Locals<2> v6 v10
    }
    CondBranch<2, 3> v13
  }

  bb 2 (preds 1) {
    v14:LongExact[100] = LoadConst<LongExact[100]>
    Return v14
  }

  bb 3 (preds 0, 1) {
    v16:OptLongExact = Phi<0, 1> v7 v10
    v17:LongExact = CheckVar<1; "y"> v16 {
      NextInstrOffset 18
      Locals<2> v6 v16
    }
    Return v17
  }
}
---
BinaryOpSubscriptFromListIsSpecialized
---
def test():
  ls = [1, 2, 3]
  return ls[1]
---
fun jittestmodule:test {
  bb 0 {
    v8:Nullptr = LoadConst<Nullptr>
    v9:LongExact[1] = LoadConst<LongExact[1]>
    v10:LongExact[2] = LoadConst<LongExact[2]>
    v11:LongExact[3] = LoadConst<LongExact[3]>
    v12:ListExact = MakeListTuple<list, 3> {
      NextInstrOffset 8
      Locals<1> v8
      Stack<3> v9 v10 v11
    }
    InitListTuple<list, 3> v12 v9 v10 v11
    v16:LongExact[1] = LoadConst<LongExact[1]>
    v18:CInt64 = PrimitiveUnbox<CInt64> v16
    v19:CInt64 = CheckSequenceBounds v12 v18 {
      NextInstrOffset 16
      Locals<1> v12
    }
    v20:CPtr = LoadField<24> v12
    v21:Object = LoadArrayItem v20 v19 v12
    Return v21
  }
}
---
BinaryOpSubscriptFromNonListEmitsBinaryOp
---
ls = object()

def test():
  return ls[1]
---
fun jittestmodule:test {
  bb 0 {
    v3:OptObject = LoadGlobalCached<0; "ls">
    v4:ObjectExact[object:0xdeadbeef] = GuardIs<0xdeadbeef> v3
    v5:LongExact[1] = LoadConst<LongExact[1]>
    v6:Object = BinaryOp<Subscript> v4 v5 {
      NextInstrOffset 6
    }
    Return v6
  }
}
---
BinaryOpSubscriptFromTupleIsSpecialized
---
def test():
  ls = (1, 2, 3)
  return ls[1]
---
fun jittestmodule:test {
  bb 0 {
    v4:Nullptr = LoadConst<Nullptr>
    v5:TupleExact[tuple:0xdeadbeef] = LoadConst<TupleExact[tuple:0xdeadbeef]>
    v8:LongExact[1] = LoadConst<LongExact[1]>
    v10:CInt64 = PrimitiveUnbox<CInt64> v8
    v11:CInt64 = CheckSequenceBounds v5 v10 {
      NextInstrOffset 10
      Locals<1> v5
    }
    v12:Object = LoadArrayItem<Offset[24]> v5 v11 v5
    Return v12
  }
}
---
