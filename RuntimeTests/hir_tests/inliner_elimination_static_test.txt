InlinerEliminationStaticTest
---
InlineFunctionCalls
Simplify
BeginInlinedFunctionElimination
---
Simple
---
def foo():
    # Chosen by fair dice roll. Guaranteed to be random.
    return 4

def test():
    return foo()
---
fun jittestmodule:test {
  bb 0 {
    v5:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    Return v5
  }
}
---
InlineMultipleFunctions
---
def foo():
    return 3

def bar():
    return 4

def test():
    return foo() + bar()
---
fun jittestmodule:test {
  bb 0 {
    v10:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v14:ImmortalLongExact[4] = LoadConst<ImmortalLongExact[4]>
    UseType<LongExact> v10
    UseType<LongExact> v14
    UseType<ImmortalLongExact[3]> v10
    UseType<ImmortalLongExact[4]> v14
    v17:ImmortalLongExact[7] = LoadConst<ImmortalLongExact[7]>
    Return v17
  }
}
---
BeginEndWithMemoryEffectsNotRemoved
---
def add(x, y):
  return x + y

def test():
    return add(3, "x")
---
fun jittestmodule:test {
  bb 0 {
    v4:ImmortalLongExact[3] = LoadConst<ImmortalLongExact[3]>
    v5:MortalUnicodeExact["x"] = LoadConst<MortalUnicodeExact["x"]>
    BeginInlinedFunction<jittestmodule:add> {
      NextInstrOffset 10
    }
    v15:Object = BinaryOp<Add> v4 v5 {
      FrameState {
        NextInstrOffset 8
        Locals<2> v4 v5
      }
    }
    EndInlinedFunction
    Return v15
  }
}
---
InlinedStoreFieldLoadFieldIsEliminated
---
from __static__ import int8

class C:
  def __init__(self):
    self.foo: int8 = 4

  def getfoo(self) -> int8:
    return self.foo

def test() -> int8:
    return C().getfoo()
---
fun jittestmodule:test {
  bb 0 {
    v5:ObjectUser[C:Exact] = TpAlloc<C> {
      FrameState {
        NextInstrOffset 4
      }
    }
    v15:CInt8[4] = LoadConst<CInt8[4]>
    v17:Nullptr = LoadConst<Nullptr>
    UseType<CInt8> v15
    StoreField<foo@16> v5 v15 v17
    v19:NoneType = LoadConst<NoneType>
    v26:CInt8 = LoadField<foo@16, CInt8, borrowed> v5
    Return<CInt8> v26
  }
}
---
